#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Aug 21, 2020 04:55:33 PM IST  platform: Linux

import sys
from tkinter import messagebox
import cv2
import numpy as np

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import red_slab_detection_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = ColorDetect (root)
    red_slab_detection_support.init(root, top)
    root.mainloop()

w = None
def create_ColorDetect(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_ColorDetect(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = ColorDetect (w)
    red_slab_detection_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_ColorDetect():
    global w
    w.destroy()
    w = None

class ColorDetect:

    def closeWindow(self):
        msg = tk.messagebox.askyesno("Close Session", "Are you sure, You Want to close window")
        if msg:
            exit()



    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("1370x970+286+37")
        top.minsize(1, 1)
        top.maxsize(1905, 1050)
        top.resizable(1, 1)
        top.title("Red_Slab_Detect")
        top.configure(background="#000000")

        self.Canvas1 = tk.Canvas(top)
        self.Canvas1.place(relx=0.015, rely=0.057, relheight=0.681
                , relwidth=0.479)
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="blue")
        self.Canvas1.configure(selectforeground="white")

        self.Canvas2 = tk.Canvas(top)
        self.Canvas2.place(relx=0.522, rely=0.057, relheight=0.682
                , relwidth=0.47)
        self.Canvas2.configure(borderwidth="2")
        self.Canvas2.configure(relief="ridge")
        self.Canvas2.configure(selectbackground="blue")
        self.Canvas2.configure(selectforeground="white")

        self.CapLevel = tk.Label(top)
        self.CapLevel.place(relx=0.147, rely=0.011, height=34, width=252)
        self.CapLevel.configure(background="#7ad800")
        self.CapLevel.configure(text='''Capture''')

        self.OutLabel = tk.Label(top)
        self.OutLabel.place(relx=0.691, rely=0.011, height=34, width=241)
        self.OutLabel.configure(background="#89d800")
        self.OutLabel.configure(text='''Output''')

        self.capButton = tk.Button(top)
        self.capButton.place(relx=0.168, rely=0.784, height=51, width=221)
        self.capButton.configure(background="#d80000")
        self.capButton.configure(text='''Capture''')

        self.stopButton = tk.Button(top)
        self.stopButton.place(relx=0.642, rely=0.784, height=51, width=251)
        self.stopButton.configure(background="#d80000")
        self.stopButton.configure(text='''Stop''')

        self.closeButton = tk.Button(top)
        self.closeButton.place(relx=0.401, rely=0.907, height=41, width=271)
        self.closeButton.configure(background="#d80000")
        self.closeButton.configure(text='''Close''')

if __name__ == '__main__':
    vp_start_gui()





